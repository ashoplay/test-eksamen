<!DOCTYPE html>
<html lang="no">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Transaksjoner - Kukkik Ano</title>
  <link rel="stylesheet" href="/css/styles.css">
  <style>
    .transaction-card {
      margin-bottom: 20px;
      border-left: 5px solid;
      padding: 15px;
    }
    .transaction-pending { 
      border-left-color: #ffc107; 
      background-color: #fff3cd;
    }
    .transaction-accepted { 
      border-left-color: #28a745; 
      background-color: #d4edda;
    }
    .transaction-rejected { 
      border-left-color: #dc3545; 
      background-color: #f8d7da;
    }
    .offer-text {
      font-style: italic;
      color: #6c757d;
      margin: 10px 0;
      padding: 10px;
      background-color: #f8f9fa;
      border-radius: 5px;
    }
  </style>
</head>
<body>
  <header class="header">
    <div class="container">
      <nav class="navbar">
        <div class="logo">Kukkik Ano</div>
        <ul class="nav-links" id="userLinks">
          <li><a href="/">Hjem</a></li>
          <li><a href="/reinsdyr">Mine reinsdyr</a></li>
          <li><a href="/flokk">Mine flokker</a></li>
          <li><a href="/transactions">Transaksjoner</a></li>
          <li><a href="/eiere">Eiere</a></li>
          <li><a href="/faq">FAQ</a></li>
          <li><a href="/kart">Kart</a></li>
          <li><a href="/databaseinfo">Database info</a></li>
          <li><span id="username"></span></li>
          <li><a href="#" id="logoutBtn">Logg ut</a></li>
        </ul>
      </nav>
    </div>
  </header>
  
  <main class="main">
    <div class="container">
      <h1 class="page-title">Mine Transaksjoner</h1>
      
      <div class="tabs">
        <button class="tab-btn active" data-tab="all">Alle</button>
        <button class="tab-btn" data-tab="pending">Ventende</button>
        <button class="tab-btn" data-tab="completed">Fullførte</button>
      </div>
      
      <div id="transactionsList">
        <p>Laster transaksjoner...</p>
      </div>
    </div>
  </main>
  
  <footer class="footer">
    <div class="container">
      <p>&copy; 2025 Kukkik Ano - Reinsdyrdatabase</p>
    </div>
  </footer>
  
  <script src="/js/scripts.js"></script>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      loadTransactions();
      
      // Tab functionality
      document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
          // Remove active class from all buttons
          document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
          this.classList.add('active');
          
          // Filter transactions
          const tab = this.getAttribute('data-tab');
          filterTransactions(tab);
        });
      });
    });
    
    async function loadTransactions() {
      const transactionsList = document.getElementById('transactionsList');
      
      try {
        const response = await fetch('/api/transaction/my', {
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        });
        
        if (!response.ok) {
          throw new Error('Kunne ikke laste transaksjoner');
        }
        
        const transactions = await response.json();
        
        if (transactions.length === 0) {
          transactionsList.innerHTML = '<p>Ingen transaksjoner funnet.</p>';
          return;
        }
        
        renderTransactions(transactions);
      } catch (error) {
        console.error('Error:', error);
        transactionsList.innerHTML = `
          <div class="alert alert-danger">
            <p>Kunne ikke laste transaksjoner:</p>
            <p>${error.message}</p>
          </div>
        `;
      }
    }
    
    function renderTransactions(transactions) {
      const transactionsList = document.getElementById('transactionsList');
      let html = '';
      
      transactions.forEach(transaction => {
        const isFromMe = transaction.fromEier._id === getUserData().eierId;
        
        html += `
          <div class="card transaction-card transaction-${transaction.status}">
            <h3 class="card-title">
              ${isFromMe ? 'Sendt til' : 'Mottatt fra'}: 
              ${isFromMe ? transaction.toEier.navn : transaction.fromEier.navn}
            </h3>
            <p><strong>Reinsdyr:</strong> ${transaction.reinsdyr.navn} (${transaction.reinsdyr.serienummer})</p>
            
            <div class="offer-text">
              <strong>Handelstilbud:</strong> "${transaction.offerText}"
            </div>
            
            <p><strong>Status:</strong> ${getStatusLabel(transaction.status)}</p>
            <p><strong>Dato:</strong> ${new Date(transaction.createdAt).toLocaleString('no-NO')}</p>
            
            ${renderActionButtons(transaction)}
          </div>
        `;
      });
      
      transactionsList.innerHTML = html;
      
      // Add event listeners for action buttons
      addTransactionActionListeners();
    }
    
    function getStatusLabel(status) {
      const statusLabels = {
        'pending': 'Venter på godkjenning',
        'accepted_by_receiver': 'Godkjent av mottaker',
        'rejected_by_receiver': 'Avvist av mottaker',
        'confirmed': 'Fullført',
        'cancelled': 'Kansellert'
      };
      return statusLabels[status] || status;
    }
    
    function renderActionButtons(transaction) {
      const isFromMe = transaction.fromEier._id === getUserData().eierId;
      
      // Action buttons based on transaction status and user role
      if (isFromMe) {
        if (transaction.status === 'accepted_by_receiver') {
          return `
            <div class="transaction-actions">
              <button class="btn btn-primary confirm-transaction" 
                      data-id="${transaction._id}">
                Bekreft overføring
              </button>
              <button class="btn btn-danger cancel-transaction" 
                      data-id="${transaction._id}">
                Avbryt
              </button>
            </div>
          `;
        } else if (transaction.status === 'pending') {
          return `
            <div class="transaction-actions">
              <button class="btn btn-danger cancel-transaction" 
                      data-id="${transaction._id}">
                Avbryt
              </button>
            </div>
          `;
        }
      } else {
        if (transaction.status === 'pending') {
          return `
            <div class="transaction-actions">
              <button class="btn btn-primary accept-transaction" 
                      data-id="${transaction._id}">
                Godta
              </button>
              <button class="btn btn-danger reject-transaction" 
                      data-id="${transaction._id}">
                Avvis
              </button>
            </div>
          `;
        }
      }
      
      return ''; // No actions for completed/cancelled transactions
    }
    
    function addTransactionActionListeners() {
      // Accept transaction
      document.querySelectorAll('.accept-transaction').forEach(btn => {
        btn.addEventListener('click', async function() {
          const transactionId = this.getAttribute('data-id');
          await updateTransactionStatus(transactionId, 'accept');
        });
      });
      
      // Reject transaction
      document.querySelectorAll('.reject-transaction').forEach(btn => {
        btn.addEventListener('click', async function() {
          const transactionId = this.getAttribute('data-id');
          await updateTransactionStatus(transactionId, 'reject');
        });
      });
      
      // Confirm transaction
      document.querySelectorAll('.confirm-transaction').forEach(btn => {
        btn.addEventListener('click', async function() {
          const transactionId = this.getAttribute('data-id');
          await updateTransactionStatus(transactionId, 'confirm');
        });
      });
      
      // Cancel transaction
      document.querySelectorAll('.cancel-transaction').forEach(btn => {
        btn.addEventListener('click', async function() {
          const transactionId = this.getAttribute('data-id');
          await updateTransactionStatus(transactionId, 'cancel');
        });
      });
    }
    
    async function updateTransactionStatus(transactionId, action) {
      try {
        let endpoint = '';
        switch(action) {
          case 'accept':
            endpoint = `/api/transaction/${transactionId}/accept`;
            break;
          case 'reject':
            endpoint = `/api/transaction/${transactionId}/reject`;
            break;
          case 'confirm':
            endpoint = `/api/transaction/${transactionId}/confirm`;
            break;
          case 'cancel':
            endpoint = `/api/transaction/${transactionId}/cancel`;
            break;
          default:
            throw new Error('Ugyldig handling');
        }
        
        const response = await fetch(endpoint, {
          method: 'PUT',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('token')}`
          }
        });
        
        const data = await response.json();
        
        if (response.ok) {
          alert(data.message || 'Handling utført');
          loadTransactions(); // Reload transactions
        } else {
          alert(data.message || 'Kunne ikke utføre handlingen');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Det oppstod en feil');
      }
    }
    
    function filterTransactions(tab) {
      const transactions = document.querySelectorAll('.transaction-card');
      
      transactions.forEach(transaction => {
        switch(tab) {
          case 'all':
            transaction.style.display = 'block';
            break;
          case 'pending':
            transaction.style.display = 
              transaction.classList.contains('transaction-pending') ? 'block' : 'none';
            break;
          case 'completed':
            transaction.style.display = 
              transaction.classList.contains('transaction-confirmed') ? 'block' : 'none';
            break;
        }
      });
    }
  </script>
</body>
</html>